context:
  model_files: ['data_models/model/project/fsc_project_model.emf']
  file_test_instances: ['data_models/model/acc/test.model']
  evl_output_file: 'data_models/model/project/fsc.evl'
  json_output_file: 'ISO_model/generated/interpretation_fsc.json'
requirements:
  3-7:
    classification: [from_arash]
    pr_model: [SafetyGoal, ASIL, FaultTolerantTimeInterval, OperatingMode, SafeState, System, Item, EmergencyOperationInterval, TimeInterval, SafetyRequirement, HazardousEvent,
    SafetyGoal.asil, SafetyGoal.fttts, SafetyGoal.safe_states, PrelimElement.developed_into, Item.safety_goals, Item.operating_modes,
    Item.asil]
    status: assumed
  3-8.1:
    classification: [structure_intro]
    pr_model:
    - FunctionalSafetyRequirement
    - FunctionalSafetyRequirement.allocated_to_prelim
    - FunctionalSafetyRequirement.mitigated
    - PrelimElement
    - ExternalRiskReduction
    status: gen
  3-8.2:
    classification: [structure_intro]
    ignored: functional safety requirements contain basic safety mechanisms and safety measures.
    # TODO: fault tolerant mechanisms are ignored for now
    pr_model:
    - FunctionalSafetyRequirement.allocated_to_prelim
    - FaultDetection
    - FailureMitigation
    - SafeState
    - DriverWarning
    - ArbritationLogic
    # TODO: these elements could be part of the document only
    - FunctionalSafetyConcept.fault_detections
    - FunctionalSafetyConcept.failure_mitigations
    - FunctionalSafetyConcept.safe_states
    - FunctionalSafetyConcept.driver_warnings
    - FunctionalSafetyConcept.arbritation_logics
    - FunctionalSafetyRequirement.asil
    status: todo
  3-8.3:
    classification: [clause_input]
    pr_model: [Item, SafetyGoal, HazardousEvent,
    PrelimArchitecturalAssumption, FunctionalConcept, OperatingMode, SystemState]
    status: gen
  3-8.4.1:
    classification: []
    references: 8-6
    status: gen
  3-8.4.2.1:
    classification: [structure, activity]
    pr_model:
    - FunctionalSafetyRequirement.derrived_from_sg # Explicitly denoted that its a multiple
    - FunctionalSafetyRequirement.derrived_from_ss
    ocl:
      satisfies:
      - c: FunctionalSafetyRequirement
        t: self.derrived_from_sg.length() > 0 or self.derrived_from_ss.length() > 0
    activity: SPECIFY FunctionalSafetyRequirement FROM SafetyGoal and SafeState, CONSIDERING (PrelimArchitecturalAssumption, FunctionalConcept, OperatingMode, SystemState)
    status: gen
  3-8.4.2.2:
    classification: []
    ocl:
      satisfies:
      - c: SafetyGoal
        t: FunctionalSafetyRequirement.all().exists(fsr | fsr.derrived_from_sg.includes(self))
    status: gen
  3-8.4.2.3:
    classification: [act]
    pr_model: [OperatingMode, FaultTolerantTimeInterval, SafeState, EmergencyOperationInterval, FunctionalRedundancies, SafetyAnalysis]
    activity: SPECIFY FunctionalSafetyRequirement, CONSIDERING (OperatingMode, FaultTolerantTimeInterval, SafeState, EmergencyOperationInterval, FunctionalRedundancies, SafetyAnalysis) GENERATING SafetyAnalysis
    ignored: "if transitioning to a safe state can comply with this requirement"
    status: gen
  3-8.4.2.4:
    classification: [structure, act]
    pr_model:
    - WarningAndDegredationConcept
    - TechnicalStateTransition
    - TechnicalStateTransition.do_condition
    - TechnicalStateTransition.rev_condition
    - SafeState.transition_to
    - SafeState.transition_from
    - TechnicalCondition
    activity: SPECIFY WarningAndDegredationConcept, CONSIDERING ALL ATTRIBUTES
    ocl:
      warning:
      - c: SafeState
        # SafeState transitions should be specified but it is not denoted that they should exists
        t: self.transition_to.length() > 0 and self.transition_from.length() > 0
      satisfies:
      - c: TechnicalStateTransition
        guard: SafeState.all().exists(s | s.transition_to.includes(self) or s.transition_from.includes(self))
        message: "All state transitions for SafeState need to have a condition"
        t: self.do_condition.length() > 0 and self.rev_condition.length() > 0
    status: gen
  3-8.4.2.5:
    classification: [ocl]
    pr_model:
    - EmergencyOperation
    - SafeState.emergency_operation
    - SwitchOffTransition
    - TechnicalStateTransition.duration
    - TimeInterval.direct
    ocl:
      satisfies:
      - c: SafeState
        t: '(not self.transition_to.exists(t | t.isKindOf(SwitchOffTransition) and t.duration.isDefined() and t.duration.direct))
        implies self.emergency_operation.length() > 0'
    status: gen
  3-8.4.2.6:
    classification: [structure, vague]  # A requirement needs to comply with a safety goal? Is cover meant here?
    pr_model:
    - ActorAction
    - ActorAction.actor
    - Actor
    - Actor.name
    - SafetyGoal.needs
    #activity: CHECK IF assumptions ARE MADE ON ActorAction
    status: gen
  3-8.4.2.6.a:
    classification: [structure, ocl]
    pr_model:
    - FunctionalSafetyConcept.assumed_actions
    pre:
    - 'CREATE Actor{name:"driver"}'
    ocl:
      structure:
      - c: Actor
    #QUESTION: How about documents. They can be modeled as a separate entity which should contain certain project instance specific elements
    # However this might be a bit overkill as all elements will (i think almost all he time) all be included in the document
    # Then a document could just as well be modeled separate from the project instance.
    # otherwise we would have
#      document_inclusion:
#      - c: ActorAction
#        guard: SafetyGoal.all().exists(sg | sg.needs.contains(self)) # All ActorActions related to some safety goal
#        message: The 'functional safety concept' should contain all the assumed actions from the SafetyGoals
#        pre:
#          - 'ASSERT FunctionalSafetyConcept.all().size() == 1 MESSAGE There must be one functional safety concept'
#        t: FunctionalSafetyConcept.all().random().assumed_actions.includes(self)
    status: gen
  3-8.4.2.6.b:
    classification: [strucutre, ocl]
    pr_model:
    - ActorMean
    - Actor.means
    - ActorControl
    - Actor.controls
    ocl:
      satisfies:
      - c: Actor
        ts:
        - Actor.means.length() > 0
        - Actor.controls.length() > 0
    ignored: Note 1 and 2
    status: gen
  3-8.XXXXX:
    classification: [structure]
    status: todo
work_products:
  3-8.5.1:
    contains_all:
      safe_states: SafeState
    status: todo

#    - Har
#    - SafetyGoal
#    - SafetyGoal.asil
#  3-8.1:
#    pr_model: