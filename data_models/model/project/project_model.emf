//{"context": {"interpretation_files": ["ISO_model/generated/interpretation.json"]}}
@namespace(uri="project_model", prefix="pm")
// This document contains the model for elements of the project
package project_model;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Techincal elements (Iso defined)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Item {
	attr String[1] name;
	
	//5.4.1
	val Description[1] description;
	val CheckTextContains[1] c__description__contains__itempurpose;
	val CheckTextContains[1] c__description__contains__functionality;
	
	val Requirement[*] requirements;
	val CheckComplete[1] c__requirements__where__type__is__functional;
	val CheckComplete[1] c__requirements__where__type2__is__operational;
	val CheckComplete[1] c__requirements__where__type2__is__environmental;
	val CheckComplete[1] c__requirements__where__type__is__legal;
	
	val CheckTextContains[1] c__description__contains__constraints;
	
	val EnvironmentalDependency[*] env_dependency;
	val CheckComplete[1] c__of__env_dependency;
	
	//5.4.2
	val ItemSafetyRequirement[*] already_known_srs;
	val CheckComplete[1] c__already_known_srs__wrt__behavior_similar_functions;
	val CheckComplete[1] c__already_known_srs__wrt__behavior_similar_systems;
	val CheckComplete[1] c__already_known_srs__wrt__behavior_similar_elements;
	
	val CheckComplete[1] c__already_known_srs__wrt__assumptions_itembehavior;
	
	val CheckComplete[1] c__already_known_srs__wrt__behavior_shortfalls;
	val CheckComplete[1] c__already_known_srs__wrt__failure_modes;
	val CheckComplete[1] c__already_known_srs__wrt__hazards;
	
	//5.4.3 ...
	val CheckTextContains[1] c__description__contains__itemboundry;
	val CheckTextContains[1] c__description__contains__iteminterfaces;
	val CheckTextContains[1] c__description__contains__itemassumptions_on_other;
}
class Requirement {
	attr String[1] rId;
	attr RequirementType[1] type;
	attr RequirementSubType[0..1] type2;
	attr RequirementSource[0..1] related_to;
}
class ItemSafetyRequirement extends SafetyRequirement {
}
class SafetyRequirement extends Requirement{
	attr ASIL[1] asil;

	attr SafetyRequirementLevel[1] level;
	ref SafetyRequirement[*] parent;
	
	attr String[1] specification_natural_language;
	attr SafetyRequirementSpecificationManner[1] specification_manner;
}
class PreviouslyKnownSafetyRequirements extends SafetyRequirement {
	ref PKSRDerivation[0..1] derived_from;
	
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Artifacts
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
abstract class Artifact {} 
class WorkProduct extends Artifact {
	attr String[1] name;
}
class Description extends Artifact {
	attr String[1] contents;
}
class Unidentified extends Artifact {
	attr String[1] contents;

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Verification process atts
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// With the descriptions of notation used
// Note that the exact meaning should be in the requirements, only an plausible distinction shoule be made with the naming of the attribute
abstract class Check{
	attr String[1] description;
	attr Boolean[1] validated = false;
}
class CheckComplete extends Check {
	// Checks if all elements in an attribute are complete.
	// of__<attribute[*]>
	// <attribute[*]>__where__<attribute.class.attribute>__is__<enum>
	// <attribute[*]>__where__<attribute.class.attribute>__is__<bool>
}
class CheckTextContains extends Check {
	// Check if some text contains a required specification
	// <String attribute[1]>__contains__<<Aspect>>
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Project structure elements
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum RequirementType {
	functional; non_functional; legal;
}
enum RequirementSubType {
	operational; environmental;
}
enum RequirementSource {
	
}

class PKSRDerivation {
	attr String[1] name;
}
class ItemExternalAssumptionTypes {
	attr String[1] name;
}
class EnvironmentalDependency {
	attr String[1] description; // Could be "No dependency"
}
enum SafetyRequirementLevel {
	HARA; Safety_Goal; Functional; Technical; HW_SW;
}
enum SafetyRequirementSpecificationManner {
	informal; semi_formal; formal;
}
enum ProjectType {
	model_based_development; other;
}
enum IsoConcept {
	management_of_safety_requirements;
}
enum ASIL {
	QM; A; B; C; D;
	QM_A; QM_B; QM_C; QM_D;
	A_A; A_B; A_C; A_D;
	B_B; B_C; B_D;
	C_C; C_D;
	D_D; 
}
